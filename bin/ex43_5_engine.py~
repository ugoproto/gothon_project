#!/bin/python2
# -*- coding: utf-8 -*-

import sys
sys.path.append('.')

#from sys import exit
from random import randint
import time
import math
from gothonmap import ex43_5_map


class Engine(object):
	"""
	
	"""

	def __init__(self, scene_map, hero):
        
		self.scene_map = scene_map
		self.hero = hero

	def play(self):
        
		current_scene = self.scene_map.opening_scene()

		session = 0
		while True:
			session += 1
			print "\n--- %s %s ---\n" % (ex43_5_map.chapter_[language], session)
			next_scene_name = current_scene.enter(self.hero)
			current_scene = self.scene_map.next_scene(next_scene_name)


class Scene(object):
	"""
	
	"""
	
	def enter(self):
		
		print "This class is for creating subclasses or instances. Subclass it and implement enter()."
		exit(1)


class Death(Scene): # instance class
	"""
	
	"""
	
	quips = ex43_5_map.quips_

	def enter(self, hero):
		
		print ex43_5_map.quips_[language]
		exit(1)

class LowerDeckCursive(Scene): # instance class
	"""
	
	"""
	
	def enter(self, hero):
        
		print ex43_5_map.lower_deck_cursive_[language]

		action = raw_input("[*]> ").lower()
		##action = 'tell a joke'

		if action == "a":
			print ex43_5_map.lower_deck_cursive_a_[language]
			return 'death'

		elif action == "b":
			print ex43_5_map.lower_deck_cursive_b_[language]
			return 'death'

		elif action == "c":
			print ex43_5_map.lower_deck_cursive_c_[language]
			return 'armory'

		else:
			print ex43_5_map.lower_deck_cursive_else_[language]
			return 'lower_deck_cursive'

class Armory(Scene): # instance class
	"""
	
	"""
    
	def enter(self, hero):
    
		print ex43_5_map.armory_[language]
		code = "%d%d%d" % (randint(1,9), randint(1,9), randint(1,9))

		print "\n(Code: " + code + ")\n"

		guesses = 0

		while guesses < 10:
			guess = raw_input("[###]> ")
			##guess = code
			if guess == code:
				break
			print "\nBZZZZ!...\n"
			guesses += 1
			if guesses == 3:
				print ex43_5_map.armory_hunch_[language] + str(code[0:2]) + "#\n"
			if guesses == 9:
				print ex43_5_map.armory_tip_[language] + str(code) + "\n"

		if guess == code:
			print ex43_5_map.armory_code_[language]
			return 'the_bridge'
		else:
			print ex43_5_map.armory_else_[language]
			return 'death'

class TheBridge(Scene): # instance class
	"""
	
	"""
	
	def enter(self, hero):
        
		print ex43_5_map.the_bridge_[language]

		action = raw_input("[*]> ").lower()
		##action = 'slowly place the bomb'
		if action == "a":
			print ex43_5_map.the_bridge_throw_[language]
			return 'death'

		elif action == "b":
			print ex43_5_map.the_bridge_slowly_[language]
			return 'escape_pod'
		else:
			print ex43_5_map.the_bridge_else_[language]
			return "the_bridge"

class EscapePod(Scene): # instance class
	"""
	
	"""
	
	def enter(self, hero):
        
		print ex43_5_map.escape_pod_[language]

		good_pod = randint(1,5)
		print "\n([#]> " + str(good_pod) +")\n"
		guess = raw_input("[#]> ")
		##guess = good_pod
		if int(guess) != good_pod:
			print ex43_5_map.escape_pod_not_[language] % (guess)
			return 'death'
		else:
			print ex43_5_map.escape_pod_else_[language] % (guess)
			return 'final_fight'

class Win(Scene): # instance class
	"""
	
	"""
	
	def enter(self, hero):

		print ex43_5_map.win_[language]
		exit(0)

class Final(Scene):  # instance class, final fight
	"""
	
	"""
	
	def enter(self, hero):

		monster = Monster("Gothon") # initialize a monster

		print ex43_5_map.final_fight_[language] % (hero.name, monster.name)

		a_combat = Combat()

		next_stage = a_combat.combat(hero, monster)
		return next_stage

class Combat(object):

	def combat(self, hero, monster): # combat between two roles

		round = 1
		print ""
		#stats monster is stronger, you recover faster
		print ex43_5_map.stats_[language] % (monster.power, hero.power, hero.rate, monster.rate)
		while True:
			print ""
			print '='*30
			print 'Round %d' % (round)
			print '='*30
			print ex43_5_map.hp_hero_[language] % (hero.hp)
			print ex43_5_map.hp_monster_[language] % (monster.name, monster.hp)
			print ex43_5_map.what_[language]

			print ex43_5_map.what_attack_[language]
			print ex43_5_map.what_defend_[language]

			try:
				action = int(raw_input('[#]> '))
			except ValueError:
				print ex43_5_map.what_except_[language]
				continue

			# defending should be done before attacking
			if action == 2:
				hero.defend()

			# action of monster, 1/5 possibility it will defends
			monster_action = randint(1, 5)
			if monster_action == 5:
		   		monster.defend()

			if action == 1:
				special = randint(1, 5)
				if special == 1:
					hero.special_attack(monster)
				elif special == 2:
					hero.devastating_attack(monster)
				else:
					hero.attack(monster)
			elif action == 2:
				pass
			else:
				print ex43_5_map.what_no_[language]

			if monster_action < 5:
				monster.attack(hero)

			# whether win or die
			if hero.hp <= 0:
				print ex43_5_map.hero_hp_[language]
				return 'death'

			if monster.hp <= 0:
				print ex43_5_map.monster_hp_[language]
				return 'win'

			hero.rest()
			monster.rest()

			round += 1

class Species(object): # class for species
	"""
	
	"""
	
	defending = 0

	def __init__(self, name):
		
		self.name = name

	def attack(self, target): # attacking state
        
		percent = 0
		time.sleep(0.5)
		if target.defending == 1:
			percent = float(self.power) / 10.0 + randint(0, 10)
			target.hp = math.floor(target.hp - percent)
		else:
			percent = float(self.power) / 5.0 + randint(0, 10)
			target.hp = math.floor(target.hp - percent)
			print ex43_5_map.attack_[language] % (self.name, target.name, target.name, percent)

	def special_attack(self, target): # special attacking state
        
		percent = 0
		time.sleep(0.5)
		percent = float(self.power) / 1.0 + randint(0, 10)
		target.hp = math.floor(target.hp - percent)
		print ex43_5_map.special_attack_[language] % (self.name, target.name, target.name, percent)

	def devastating_attack(self, target): # special attacking state
        
		percent = 0
		time.sleep(0.5)
		percent = float(self.power) * 2.0 + randint(0, 10)
		target.hp = math.floor(target.hp - percent)
		print ex43_5_map.devastating_attack_[language] % (self.name, target.name, percent)

	def defend(self): # defensive state
        
		self.defending = 1
		print ex43_5_map.defend_[language] % (self.name)

		def rest(self): # recover a bit after each round

			if self.defending == 1:
				percent = self.rate * 10 + randint(0, 10)
			else:
				percent = self.rate * 2 + randint(0, 10)

			self.hp += percent
			print ex43_5_map.rest_[language] % (self.name, percent)
			self.defending = 0

class Hero(Species): # instance class for hero
	"""
	
	"""
	
	hp = 100 # life
	power = 200 # attacks
	rate = 3 # recovery

class Monster(Species): # instance class for monster
	"""
	
	"""
	
	hp = 200
	power = 350
	rate = 1

class Map(object):
	"""
	
	"""
    
	scenes = {
		'lower_deck_cursive': LowerDeckCursive(),
		'armory': Armory(),
		'the_bridge': TheBridge(),
		'escape_pod': EscapePod(),
		'death': Death(),
		'final_fight': Final(),
		'win': Win()
}

	def __init__(self, start_scene):

		self.start_scene = start_scene

	def next_scene(self, scene_name):

		return Map.scenes.get(scene_name)

	def opening_scene(self):

		return self.next_scene(self.start_scene)


def lang():
    
    print ex43_5_map.language_
    while True:
        lang = raw_input(str("[e]/[f] >")).lower()
        if lang == 'e':
            language = 0
            return language
        elif lang == 'f':
            language = 1
            return language
        else:
            pass


# code begins executing here
language = lang()

# Map('lower_deck_cursive') returns LowerDeckCursive()
# into a_map
# a_map is used below
a_map = Map('lower_deck_cursive')

# print language selection
print ex43_5_map.hero_[language]

# print hero's name selection
while True:
	hero_name = raw_input(str("> "))
	if hero_name != "":
		break

# apply the name
# apply the first room (a_map)
# start the game
# launch the game
a_hero = Hero(hero_name)
a_game = Engine(a_map, a_hero)
a_game.play()
