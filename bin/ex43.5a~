#!/bin/python2
# -*- coding: utf-8 -*-

from sys import exit
from random import randint
import time
import math
from Bureau import ex43_


class Engine(object):

    def __init__(self, scene_map, hero):
        self.scene_map = scene_map
        self.hero = hero

    def play(self):
        current_scene = self.scene_map.opening_scene()

        session = 0
        while True:
            session += 1
            print "\n--- CHAPTER %s ---\n" % (session)
            next_scene_name = current_scene.enter(self.hero)
            current_scene = self.scene_map.next_scene(next_scene_name)

class Scene(object):

    def enter(self):
        print "This class is for creating subclasses or instances."
        print "Subclass it and implement enter()."
        exit(1)

class Death(Scene): # instance class

    quips = [
        "You died.  Miserably... As always, you kinda suck. Only this time, it's fatal.\n\nTHE END\n",
         "Your mom would have be proud...if she had been smarter.\n\nTHE END\n",
         "You're history. Luckily, we forget loosers. \n\nTHE END\n",
         "Gone... I once had a small puppy that was better at this.\n\nTHE END\n"
    ]

    def enter(self, hero):
        print Death.quips[randint(0, len(self.quips)-1)]
        exit(1)

class CentralCorridor(Scene): # instance class

    def enter(self, hero):
        print "The Gothons of Planet Percal #25 have invaded your ship and destroyed"
        print "your entire crew.  You are the last surviving member and your last"
        print "mission is to get the neutron destruct bomb from the Weapons Armory,"
        print "put it in the bridge, and blow the ship up after getting into an "
        print "escape pod.\n"
        print "You're running down the central corridor to the Weapons Armory when"
        print "a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume"
        print "flowing around his hate filled body.  He's blocking the door to the"
        print "Armory and about to pull a weapon to blast you.\n"

        #action = raw_input("shoot! / dodge! / tell a joke > ").lower()
        action = 'tell a joke'

        if action == "shoot!":
            print "\nQuick on the draw you yank out your blaster and fire it at the Gothon."
            print "His clown costume is flowing and moving around his body, which throws"
            print "off your aim.  Your laser hits his costume but misses him entirely.  This"
            print "completely ruins his brand new costume his mother bought him, which"
            print "makes him fly into an insane rage and blast you repeatedly in the face until"
            print "you are dead.  Then he eats you."
            return 'death'

        elif action == "dodge!":
            print "\nLike a world class boxer you dodge, weave, slip and slide right"
            print "as the Gothon's blaster cranks a laser past your head."
            print "In the middle of your artful dodge your foot slips and you"
            print "bang your head on the metal wall and pass out."
            print "You wake up shortly after only to die as the Gothon stomps on"
            print "your head and eats you."
            return 'death'

        elif action == "tell a joke":
            print "\nLucky for you they made you learn Gothon insults in the academy."
            print "You tell the one Gothon joke you know:"
            print "Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr."
            print "The Gothon stops, tries not to laugh, then busts out laughing and can't move."
            print "While he's laughing you run up and shoot him square in the head"
            print "putting him down, then jump through the Weapon Armory door."
            return 'laser_weapon_armory'

        else:
            print "\nDOES NOT COMPUTE!\nPlease pick one of the choices. Let's pretend you were smart the first time and move on to the next chapter as if nothing wrong happened."
            return 'central_corridor'

class LaserWeaponArmory(Scene): # instance class

    def enter(self, hero):
        print "You do a dive roll into the Weapon Armory, crouch and scan the room"
        print "for more Gothons that might be hiding.  It's dead quiet, too quiet."
        print "You stand up and run to the far side of the room and find the"
        print "neutron bomb in its container.  There's a keypad lock on the box"
        print "and you need the code to get the bomb out.  If you get the code"
        print "wrong 10 times then the lock closes forever and you can't"
        print "get the bomb.  The code is 3 digits."
        code = "%d%d%d" % (randint(1,9), randint(1,9), randint(1,9))

        print "\n(Code: " + code + ")\n"

        guesses = 0

        while guesses < 10:
            #guess = raw_input("[keypad] > ")
            guess = code
            if guess == code:
                break
            print "\nBZZZZEDDD!...\n"
            guesses += 1

        if guess == code:
            print "\nThe container clicks open and the seal breaks, letting gas out."
            print "You grab the neutron bomb and run as fast as you can to the"
            print "bridge where you must place it in the right spot."
            return 'the_bridge'
        else:
            print "\nThe lock buzzes one last time and then you hear a sickening"
            print "melting sound as the mechanism is fused together."
            print "You decide to sit there, and finally the Gothons blow up the"
            print "ship from their ship and you die."
            return 'death'

class TheBridge(Scene): # instance class

    def enter(self, hero):
        print "You burst onto the Bridge with the netron destruct bomb"
        print "under your arm and surprise 5 Gothons who are trying to"
        print "take control of the ship.  Each of them has an even uglier"
        print "clown costume than the last.  They haven't pulled their"
        print "weapons out yet, as they see the active bomb under your"
        print "arm and don't want to set it off.\n"

        #action = raw_input("throw the bomb / slowly place the bomb > ").lower()
        action = 'slowly place the bomb'
        if action == "throw the bomb":
            print "\nIn a panic you throw the bomb at the group of Gothons"
            print "and make a leap for the door.  Right as you drop it a"
            print "Gothon shoots you right in the back killing you."
            print "As you die you see another Gothon frantically try to disarm"
            print "the bomb. You die knowing they will probably blow up when"
            print "it goes off."
            return 'death'

        elif action == "slowly place the bomb":
            print "\nYou point your blaster at the bomb under your arm"
            print "and the Gothons put their hands up and start to sweat."
            print "You inch backward to the door, open it, and then carefully"
            print "place the bomb on the floor, pointing your blaster at it."
            print "You then jump back through the door, punch the close button"
            print "and blast the lock so the Gothons can't get out."
            print "Now that the bomb is placed you run to the escape pod to"
            print "get off this tin can."
            return 'escape_pod'
        else:
            print "\nDOES NOT COMPUTE!"
            return "the_bridge"

class EscapePod(Scene): # instance class

    def enter(self, hero):
        print "You rush through the ship desperately trying to make it to"
        print "the escape pod before the whole ship explodes.  It seems like"
        print "hardly any Gothons are on the ship, so your run is clear of"
        print "interference.  You get to the chamber with the escape pods, and"
        print "now need to pick one to take.  Some of them could be damaged"
        print "but you don't have time to look.  There's 5 pods, which one"
        print "do you take?\n"

        good_pod = randint(1,5)
        print "(The good pod is # " + str(good_pod) +")"
        #guess = raw_input("\n[#] > ")
        guess = good_pod
        if int(guess) != good_pod:
            print "\nYou jump into pod %s and hit the eject button." % guess
            print "The pod escapes out into the void of space, then"
            print "implodes as the hull ruptures, crushing your body"
            print "into jam jelly."
            return 'death'
        else:
            print "\nYou jump into pod %s and hit the eject button." % guess
            print "The pod easily slides out into space heading to"
            print "the planet below.  As it flies to the planet, you look"
            print "back and see your ship implode then explode like a"
            print "bright star, taking out the Gothon ship at the same"
            print "time..."

            return 'final_fight'

class Win(Scene): # instance class

    def enter(self, hero):

        print "You prevailed! Your are victorious!"
        print "A true hero."
        print "\nTHE END\n"
        exit(0)

class Final(Scene):  # instance class, final fight

    def enter(self, hero):

        # initialize a monster
        monster = Monster("Gothon")

        print "But wait... Just like in Alien's final scene,"
        print "we are not over: a Gothon was hidden in the pod!"
        print "%s, You are now facing a %s boss! You will have to fight!!!" % (hero.name, monster.name)
        print "Isn't it epic? Good versus Evil, and that kind of crap."
        print "Anyway, let's carry on."
        print "\nAh, remember that you wear a smart suit."
        print "Don't worry against concussions or minor injuries as your"
        print "integrated health pack will inject you healing serum."
        print "Your enemy has this natural ability too."
        print "Only your suit is more effective!"
        print "\nEven though this guy is front of you is stronger,"
        print "remember that we are in a movie. It's all arranged."
        print "Most of the time."

        a_combat = Combat()

        next_stage = a_combat.combat(hero, monster)
        return next_stage

class Combat(object):

    def combat(self, hero, monster): # combat between two roles

        round = 1
        while True:
            print ""
            print '='*30
            print 'Round %d' % round
            print '='*30
            print "Your HP: %d" % hero.hp
            print "%s's HP: %d\n" % (monster.name, monster.hp)
            print 'What do you do?'

            print '1 - Attack'
            print '2 - Remain defensive, and recover'

            try:
                action = int(raw_input('[#] > '))
            except ValueError:
                print "Please enter a number!!"
                continue

            # defending should be done before attacking
            if action == 2:
                hero.defend()

            # action of monster, 1/5 possibility it will defends
            monster_action = randint(1, 5)
            if monster_action == 5:
               monster.defend()

            if action == 1:
                special = randint(1, 5)
                if special == 1:
                    hero.special_attack(monster)
                elif special == 2:
                    hero.devastating_attack(monster)
                else:
                    hero.attack(monster)
            elif action == 2:
                pass
            else:
                print "No such action!"

            if monster_action < 5:
                monster.attack(hero)

            # whether win or die
            if hero.hp <= 0:
                print "\nUnfortunately, this blow is fatal to you."
                return 'death'

            if monster.hp <= 0:
                print "\nI think you fatally hit the weak point... The Gothon collapses."
                return 'win'

            hero.rest()
            monster.rest()

            round += 1

class Species(object): # class for species

    defending = 0

    def __init__(self, name):
        self.name = name

    def attack(self, target): # attacking state
        percent = 0
        time.sleep(0.5)
        if target.defending == 1:
            percent = float(self.power) / 10.0 + randint(0, 10)
            target.hp = math.floor(target.hp - percent)
        else:
            percent = float(self.power) / 5.0 + randint(0, 10)
            target.hp = math.floor(target.hp - percent)
        print "%s attacks %s. %s's HP decreased by %d points." % (self.name, target.name, target.name, percent)

    def special_attack(self, target): # special attacking state
        percent = 0
        time.sleep(0.5)
        percent = float(self.power) / 1.0 + randint(0, 10)
        target.hp = math.floor(target.hp - percent)
        print "%s throws a powerful blow to %s. %s's HP decreased by %d points." % (self.name, target.name, target.name, percent)
        
    def devastating_attack(self, target): # special attacking state
        percent = 0
        time.sleep(0.5)
        percent = float(self.power) * 2.0 + randint(0, 10)
        target.hp = math.floor(target.hp - percent)
        print "%s finds a weak point. %s's HP decreased by %d points." % (self.name, target.name, percent)

    def defend(self): # defensive state
        self.defending = 1
        print "%s is defending." % self.name

    def rest(self): # recover a bit after each round
        if self.defending == 1:
            percent = self.rate * 10 + randint(0, 10)
        else:
            percent = self.rate * 2 + randint(0, 10)
        
        self.hp += percent
        print "After resting, %s's HP increased by %d." % (self.name, percent)
        self.defending = 0

class Hero(Species): # instance class for hero

    hp = 100 # life
    power = 200 # attacks
    rate = 3 # recovery

class Monster(Species): # instance class for monster

    hp = 200
    power = 350
    rate = 1

class Map(object):

    scenes = {
        'central_corridor': CentralCorridor(),
        'laser_weapon_armory': LaserWeaponArmory(),
        'the_bridge': TheBridge(),
        'escape_pod': EscapePod(),
        'death': Death(),
        'final_fight': Final(),
        'win': Win()
    }

    def __init__(self, start_scene):
        self.start_scene = start_scene

    def next_scene(self, scene_name):
        return Map.scenes.get(scene_name)

    def opening_scene(self):
        return self.next_scene(self.start_scene)

a_map = Map('central_corridor')
a_hero = Hero('Joe')
a_game = Engine(a_map, a_hero)
a_game.play()
